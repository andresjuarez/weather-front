{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","endpoint","ts","moment","format","data","_getTs","concat","_getInfoBox","_ref","key","_ref$value","value","temperature","datetime","tempNumber","parseInt","react_default","a","createElement","style","height","width","backgroundColor","color","margin","display","flexDirection","Math","round","substr","length","_sortElements","b","keyA","toLowerCase","keyB","_this2","this","socketIOClient","on","setState","Object","assign","Date","console","log","_this$state","className","justifyContent","entries","map","_ref2","_ref3","slicedToArray","sort","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wUA2DeA,6MArDbC,MAAQ,CACNC,SAAU,+DAEVC,GAAIC,MAASC,OAAO,OACpBC,KAAM,MAQRC,OAAS,SAACJ,GAAD,SAAAK,OAAWL,MAEpBM,YAAc,SAAAC,GAA2C,IAAzCC,EAAyCD,EAAzCC,IAAyCC,EAAAF,EAApCG,MAAQC,EAA4BF,EAA5BE,YAAaC,EAAeH,EAAfG,SAClCC,EAAaC,SAASH,GAC5B,OACEI,EAAAC,EAAAC,cAAA,OAAKT,IAAKA,EAAKU,MAAO,CAAEC,OAAQ,IAAKC,MAAO,IAAKC,gBAAiB,OAAQC,MAAO,QAASC,OAAQ,WAAYC,QAAS,OAAQC,cAAe,WAC5IV,EAAAC,EAAAC,cAAA,SAAIT,GACJO,EAAAC,EAAAC,cAAA,SAAIS,KAAKC,MAA0B,GAAnBd,EAAa,IAAQ,GAArC,UACAE,EAAAC,EAAAC,cAAA,YAAOhB,IAAOW,EAASgB,OAAO,EAAGhB,EAASiB,OAAO,IAAI3B,OAAO,YAKlE4B,cAAgB,SAACd,EAAEe,GACf,IAAMC,EAAMhB,EAAER,IAAIyB,cAAeC,EAAKH,EAAEvB,IAAIyB,cAC5C,OAAID,EAAOE,GAAc,EACrBF,EAAOE,EAAa,EACjB,sFAtBU,IAAAC,EAAAC,KACJC,IAAeD,KAAKtC,MAAMC,UAClCuC,GAAG,UAAW,SAAAnC,GAAI,OAAIgC,EAAKI,SAAS,CAACpC,KAAMqC,OAAOC,OAAO,GAAItC,EAAMgC,EAAKrC,MAAMK,MAAOH,GAAI,IAAI0C,MAAS,kBAAMC,QAAQC,IAAI,gDAwBvH,IAAAC,EACaT,KAAKtC,MAAlBE,EADA6C,EACA7C,GAAIG,EADJ0C,EACI1C,KAEZ,OADAwC,QAAQC,IAAI,wBAAyBzC,GAEnCY,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,OACb/B,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,UACCmB,KAAKhC,OAAOJ,KAGfe,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEM,QAAS,OAAQuB,eAAgB,WAC7ChC,EAAAC,EAAAC,cAAA,OAAMC,MAAO,CAAEM,QAAS,SACrBgB,OAAOQ,QAAQ7C,GAAM8C,IAAI,SAAAC,GAAA,IAAAC,EAAAX,OAAAY,EAAA,EAAAZ,CAAAU,EAAA,SAAmB,CAAE1C,IAArB2C,EAAA,GAA0BzC,MAA1ByC,EAAA,MAAoCE,KAAKjB,KAAKN,eAAemB,IAAIb,KAAK9B,uBA/C1FgD,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4d7c8df0.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\nimport socketIOClient from 'socket.io-client'\nimport moment from 'moment'\nclass App extends React.Component {\n\n  state = {\n    endpoint: 'http://wheaterbeanstalk-env-1.us-east-1.elasticbeanstalk.com',\n    // endpoint: 'http://localhost',\n    ts: moment().format('LTS'),\n    data: {}\n  }\n\n  componentDidMount () {\n    const socket = socketIOClient(this.state.endpoint)\n    socket.on('WEATHER', data => this.setState({data: Object.assign({}, data, this.state.data), ts: new Date()}, () => console.log('updated')))\n  }\n\n  _getTs = (ts) => `${ts}`\n\n  _getInfoBox = ({key, value: {temperature, datetime}}) => {\n    const tempNumber = parseInt(temperature)\n    return (\n      <div key={key} style={{ height: 150, width: 150, backgroundColor: 'blue', color: 'white', margin: '0px 10px', display: 'flex', flexDirection: 'column' }}>\n        <p>{key}</p>\n        <p>{Math.round((tempNumber - 32) * 5/9) } ÂºC</p>\n        <span>{moment(datetime.substr(0, datetime.length-6)).format('lll')}</span>\n      </div>\n    )\n  }\n\n  _sortElements = (a,b) => {\n      const keyA= a.key.toLowerCase(), keyB=b.key.toLowerCase()\n      if (keyA < keyB) return -1\n      if (keyA > keyB) return 1\n      return 0\n  }\n\n\n  render () {\n    const { ts, data } = this.state\n    console.log('DEBUG: render -> data', data)\n    return (\n      <div className='App'>\n        <header>\n          <h4>\n          {this._getTs(ts)}\n          </h4>\n        </header>\n        <div style={{ display: 'flex', justifyContent: 'center' }}>\n          <div  style={{ display: 'flex' }}>\n            {Object.entries(data).map(([key, value]) => ({ key, value })).sort(this._sortElements).map(this._getInfoBox)}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}